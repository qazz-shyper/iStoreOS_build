name: 构建iStoreOS-test

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      iStoreOS_branch:
        description: '固件分支 [可选]'
        default: '22.03'
      compile_type:
        description: '编译类型[customize][original]'
        default: 'original'
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  #schedule:
   #- cron: 0 1 1/7 * *

env:
  REPO_URL: https://github.com/istoreos/istoreos
  REPO_BRANCH: istoreos-${{ github.event.inputs.iStoreOS_branch }}
  #REPO_URL: https://github.com/coolsnowwolf/lede
  #REPO_BRANCH: master
  FEEDS_CONF: feeds.conf
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  DIY_P1_SH_CUSTOMIZE: diy-part1_customize.sh
  DIY_P2_SH_CUSTOMIZE: diy-part2_customize.sh
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.TOKEN }}

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:

    - name: 磁盘扩容
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024
        
    - name: 准备完成
      uses: actions/checkout@main   

    - name: 检查服务器配置
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
        df -Th

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E apt-get -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"
        echo "status=success" >> ${GITHUB_OUTPUT}
        
    - name: 安装 Go
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'
        
    - name: 克隆源码
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV

    - name: 初始化编译参数
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    - name: 缓存构建动作
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}

    - name: 加载自定义 feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF $OPENWRT_PATH/feeds.conf
        chmod +x $DIY_P1_SH
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 加载自定义脚本1
      if: (github.event.inputs.compile_type == 'customize' && (github.event.inputs.compile_type != 'original')
      run: |
        chmod +x $DIY_P1_SH_CUSTOMIZE
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_P1_SH_CUSTOMIZE   

    - name: 更新 feeds
      run: |
        cd $OPENWRT_PATH 
        git pull
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files $OPENWRT_PATH/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
        chmod +x $DIY_P2_SH
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: 加载自定义脚本2
      if: (github.event.inputs.compile_type == 'customize' && (github.event.inputs.compile_type != 'original')
      run: |
        chmod +x $DIY_P2_SH_CUSTOMIZE
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_P2_SH_CUSTOMIZE   

    - name: SSH 连接到 Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}

    - name: 下载软件包
      id: package
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "status=success" >> ${GITHUB_OUTPUT}
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV


    - name: 检查磁盘空间
      if: (!cancelled())
      run: df -hT

    - name: 上传 bin 文件夹
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: 整理固件文件
      id: organize
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        cat sha256sums
        cp $OPENWRT_PATH/.config build.config
        mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk packages
        tar -zcf Packages.tar.gz packages
        rm -rf packages feeds.buildinfo version.buildinfo
        echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 上传固件目录
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE != 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}


    - name: 生成发布标签
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H.%M")" >> ${GITHUB_OUTPUT}
        touch release.txt
        echo "
        💻 架构: x86-64

        📂 源码: ${{ env.REPO_URL }}

        🌳 分支: ${{ env.REPO_BRANCH }}

        ⏱️ 编译时间: $(date +"%Y年%m月%d日%H时%M分")
        
        🚩 编译类型：${{ github.event.inputs.compile_type }}

        🌐 管理地址: 10.0.0.201

        👤 用户名: root

        🔒 密码: password 

        " >> release.txt
        echo "status=success" >> ${GITHUB_OUTPUT} 

    - name: 自动发布固件到 Releases
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1
        token: ${{ env.GITHUB_TOKEN }}

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 4
        delete_tags: true
